/*
 * Text Generation Inference
 * Text Generation Webserver
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.springframework.ai.huggingface.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * GenerateParameters
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T16:22:50.245206268Z[Etc/UTC]")
@JsonInclude(JsonInclude.Include.NON_NULL)

public class GenerateParameters {
  @JsonProperty("best_of")
  private Integer bestOf = null;

  @JsonProperty("decoder_input_details")
  private Boolean decoderInputDetails = true;

  @JsonProperty("details")
  private Boolean details = true;

  @JsonProperty("do_sample")
  private Boolean doSample = false;

  @JsonProperty("max_new_tokens")
  private Integer maxNewTokens = null;

  @JsonProperty("repetition_penalty")
  private Float repetitionPenalty = null;

  @JsonProperty("return_full_text")
  private Boolean returnFullText = false;

  @JsonProperty("seed")
  private Long seed = null;

  @JsonProperty("stop")
  private List<String> stop = null;

  @JsonProperty("temperature")
  private Float temperature = null;

  @JsonProperty("top_k")
  private Integer topK = null;

  @JsonProperty("top_p")
  private Float topP = null;

  @JsonProperty("truncate")
  private Integer truncate = null;

  @JsonProperty("typical_p")
  private Float typicalP = null;

  @JsonProperty("watermark")
  private Boolean watermark = false;

  public GenerateParameters bestOf(Integer bestOf) {
    this.bestOf = bestOf;
    return this;
  }

   /**
   * Get bestOf
   * minimum: 0
   * @return bestOf
  **/
  @Schema(example = "1", description = "")
  public Integer getBestOf() {
    return bestOf;
  }

  public void setBestOf(Integer bestOf) {
    this.bestOf = bestOf;
  }

  public GenerateParameters decoderInputDetails(Boolean decoderInputDetails) {
    this.decoderInputDetails = decoderInputDetails;
    return this;
  }

   /**
   * Get decoderInputDetails
   * @return decoderInputDetails
  **/
  @Schema(description = "")
  public Boolean isDecoderInputDetails() {
    return decoderInputDetails;
  }

  public void setDecoderInputDetails(Boolean decoderInputDetails) {
    this.decoderInputDetails = decoderInputDetails;
  }

  public GenerateParameters details(Boolean details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @Schema(description = "")
  public Boolean isDetails() {
    return details;
  }

  public void setDetails(Boolean details) {
    this.details = details;
  }

  public GenerateParameters doSample(Boolean doSample) {
    this.doSample = doSample;
    return this;
  }

   /**
   * Get doSample
   * @return doSample
  **/
  @Schema(example = "true", description = "")
  public Boolean isDoSample() {
    return doSample;
  }

  public void setDoSample(Boolean doSample) {
    this.doSample = doSample;
  }

  public GenerateParameters maxNewTokens(Integer maxNewTokens) {
    this.maxNewTokens = maxNewTokens;
    return this;
  }

   /**
   * Get maxNewTokens
   * minimum: 0
   * @return maxNewTokens
  **/
  @Schema(description = "")
  public Integer getMaxNewTokens() {
    return maxNewTokens;
  }

  public void setMaxNewTokens(Integer maxNewTokens) {
    this.maxNewTokens = maxNewTokens;
  }

  public GenerateParameters repetitionPenalty(Float repetitionPenalty) {
    this.repetitionPenalty = repetitionPenalty;
    return this;
  }

   /**
   * Get repetitionPenalty
   * @return repetitionPenalty
  **/
  @Schema(example = "1.03", description = "")
  public Float getRepetitionPenalty() {
    return repetitionPenalty;
  }

  public void setRepetitionPenalty(Float repetitionPenalty) {
    this.repetitionPenalty = repetitionPenalty;
  }

  public GenerateParameters returnFullText(Boolean returnFullText) {
    this.returnFullText = returnFullText;
    return this;
  }

   /**
   * Get returnFullText
   * @return returnFullText
  **/
  @Schema(example = "false", description = "")
  public Boolean isReturnFullText() {
    return returnFullText;
  }

  public void setReturnFullText(Boolean returnFullText) {
    this.returnFullText = returnFullText;
  }

  public GenerateParameters seed(Long seed) {
    this.seed = seed;
    return this;
  }

   /**
   * Get seed
   * minimum: 0
   * @return seed
  **/
  @Schema(description = "")
  public Long getSeed() {
    return seed;
  }

  public void setSeed(Long seed) {
    this.seed = seed;
  }

  public GenerateParameters stop(List<String> stop) {
    this.stop = stop;
    return this;
  }

  public GenerateParameters addStopItem(String stopItem) {
    if (this.stop == null) {
      this.stop = new ArrayList<>();
    }
    this.stop.add(stopItem);
    return this;
  }

   /**
   * Get stop
   * @return stop
  **/
  @Schema(example = "[\"photographer\"]", description = "")
  public List<String> getStop() {
    return stop;
  }

  public void setStop(List<String> stop) {
    this.stop = stop;
  }

  public GenerateParameters temperature(Float temperature) {
    this.temperature = temperature;
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @Schema(example = "0.5", description = "")
  public Float getTemperature() {
    return temperature;
  }

  public void setTemperature(Float temperature) {
    this.temperature = temperature;
  }

  public GenerateParameters topK(Integer topK) {
    this.topK = topK;
    return this;
  }

   /**
   * Get topK
   * @return topK
  **/
  @Schema(example = "10", description = "")
  public Integer getTopK() {
    return topK;
  }

  public void setTopK(Integer topK) {
    this.topK = topK;
  }

  public GenerateParameters topP(Float topP) {
    this.topP = topP;
    return this;
  }

   /**
   * Get topP
   * maximum: 1
   * @return topP
  **/
  @Schema(example = "0.95", description = "")
  public Float getTopP() {
    return topP;
  }

  public void setTopP(Float topP) {
    this.topP = topP;
  }

  public GenerateParameters truncate(Integer truncate) {
    this.truncate = truncate;
    return this;
  }

   /**
   * Get truncate
   * minimum: 0
   * @return truncate
  **/
  @Schema(description = "")
  public Integer getTruncate() {
    return truncate;
  }

  public void setTruncate(Integer truncate) {
    this.truncate = truncate;
  }

  public GenerateParameters typicalP(Float typicalP) {
    this.typicalP = typicalP;
    return this;
  }

   /**
   * Get typicalP
   * maximum: 1
   * @return typicalP
  **/
  @Schema(example = "0.95", description = "")
  public Float getTypicalP() {
    return typicalP;
  }

  public void setTypicalP(Float typicalP) {
    this.typicalP = typicalP;
  }

  public GenerateParameters watermark(Boolean watermark) {
    this.watermark = watermark;
    return this;
  }

   /**
   * Get watermark
   * @return watermark
  **/
  @Schema(example = "true", description = "")
  public Boolean isWatermark() {
    return watermark;
  }

  public void setWatermark(Boolean watermark) {
    this.watermark = watermark;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateParameters generateParameters = (GenerateParameters) o;
    return Objects.equals(this.bestOf, generateParameters.bestOf) &&
        Objects.equals(this.decoderInputDetails, generateParameters.decoderInputDetails) &&
        Objects.equals(this.details, generateParameters.details) &&
        Objects.equals(this.doSample, generateParameters.doSample) &&
        Objects.equals(this.maxNewTokens, generateParameters.maxNewTokens) &&
        Objects.equals(this.repetitionPenalty, generateParameters.repetitionPenalty) &&
        Objects.equals(this.returnFullText, generateParameters.returnFullText) &&
        Objects.equals(this.seed, generateParameters.seed) &&
        Objects.equals(this.stop, generateParameters.stop) &&
        Objects.equals(this.temperature, generateParameters.temperature) &&
        Objects.equals(this.topK, generateParameters.topK) &&
        Objects.equals(this.topP, generateParameters.topP) &&
        Objects.equals(this.truncate, generateParameters.truncate) &&
        Objects.equals(this.typicalP, generateParameters.typicalP) &&
        Objects.equals(this.watermark, generateParameters.watermark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestOf, decoderInputDetails, details, doSample, maxNewTokens, repetitionPenalty, returnFullText, seed, stop, temperature, topK, topP, truncate, typicalP, watermark);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateParameters {\n");
    
    sb.append("    bestOf: ").append(toIndentedString(bestOf)).append("\n");
    sb.append("    decoderInputDetails: ").append(toIndentedString(decoderInputDetails)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    doSample: ").append(toIndentedString(doSample)).append("\n");
    sb.append("    maxNewTokens: ").append(toIndentedString(maxNewTokens)).append("\n");
    sb.append("    repetitionPenalty: ").append(toIndentedString(repetitionPenalty)).append("\n");
    sb.append("    returnFullText: ").append(toIndentedString(returnFullText)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topK: ").append(toIndentedString(topK)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    truncate: ").append(toIndentedString(truncate)).append("\n");
    sb.append("    typicalP: ").append(toIndentedString(typicalP)).append("\n");
    sb.append("    watermark: ").append(toIndentedString(watermark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
