/*
 * Text Generation Inference
 * Text Generation Webserver
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.springframework.ai.huggingface.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.springframework.ai.huggingface.model.BestOfSequence;
import org.springframework.ai.huggingface.model.FinishReason;
import org.springframework.ai.huggingface.model.PrefillToken;
import org.springframework.ai.huggingface.model.Token;
/**
 * Details
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T16:22:50.245206268Z[Etc/UTC]")
@JsonInclude(JsonInclude.Include.NON_NULL)

public class Details {
  @JsonProperty("best_of_sequences")
  private List<BestOfSequence> bestOfSequences = null;

  @JsonProperty("finish_reason")
  private FinishReason finishReason = null;

  @JsonProperty("generated_tokens")
  private Integer generatedTokens = null;

  @JsonProperty("prefill")
  private List<PrefillToken> prefill = new ArrayList<>();

  @JsonProperty("seed")
  private Long seed = null;

  @JsonProperty("tokens")
  private List<Token> tokens = new ArrayList<>();

  public Details bestOfSequences(List<BestOfSequence> bestOfSequences) {
    this.bestOfSequences = bestOfSequences;
    return this;
  }

  public Details addBestOfSequencesItem(BestOfSequence bestOfSequencesItem) {
    if (this.bestOfSequences == null) {
      this.bestOfSequences = new ArrayList<>();
    }
    this.bestOfSequences.add(bestOfSequencesItem);
    return this;
  }

   /**
   * Get bestOfSequences
   * @return bestOfSequences
  **/
  @Schema(description = "")
  public List<BestOfSequence> getBestOfSequences() {
    return bestOfSequences;
  }

  public void setBestOfSequences(List<BestOfSequence> bestOfSequences) {
    this.bestOfSequences = bestOfSequences;
  }

  public Details finishReason(FinishReason finishReason) {
    this.finishReason = finishReason;
    return this;
  }

   /**
   * Get finishReason
   * @return finishReason
  **/
  @Schema(required = true, description = "")
  public FinishReason getFinishReason() {
    return finishReason;
  }

  public void setFinishReason(FinishReason finishReason) {
    this.finishReason = finishReason;
  }

  public Details generatedTokens(Integer generatedTokens) {
    this.generatedTokens = generatedTokens;
    return this;
  }

   /**
   * Get generatedTokens
   * minimum: 0
   * @return generatedTokens
  **/
  @Schema(example = "1", required = true, description = "")
  public Integer getGeneratedTokens() {
    return generatedTokens;
  }

  public void setGeneratedTokens(Integer generatedTokens) {
    this.generatedTokens = generatedTokens;
  }

  public Details prefill(List<PrefillToken> prefill) {
    this.prefill = prefill;
    return this;
  }

  public Details addPrefillItem(PrefillToken prefillItem) {
    this.prefill.add(prefillItem);
    return this;
  }

   /**
   * Get prefill
   * @return prefill
  **/
  @Schema(required = true, description = "")
  public List<PrefillToken> getPrefill() {
    return prefill;
  }

  public void setPrefill(List<PrefillToken> prefill) {
    this.prefill = prefill;
  }

  public Details seed(Long seed) {
    this.seed = seed;
    return this;
  }

   /**
   * Get seed
   * minimum: 0
   * @return seed
  **/
  @Schema(example = "42", description = "")
  public Long getSeed() {
    return seed;
  }

  public void setSeed(Long seed) {
    this.seed = seed;
  }

  public Details tokens(List<Token> tokens) {
    this.tokens = tokens;
    return this;
  }

  public Details addTokensItem(Token tokensItem) {
    this.tokens.add(tokensItem);
    return this;
  }

   /**
   * Get tokens
   * @return tokens
  **/
  @Schema(required = true, description = "")
  public List<Token> getTokens() {
    return tokens;
  }

  public void setTokens(List<Token> tokens) {
    this.tokens = tokens;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Details details = (Details) o;
    return Objects.equals(this.bestOfSequences, details.bestOfSequences) &&
        Objects.equals(this.finishReason, details.finishReason) &&
        Objects.equals(this.generatedTokens, details.generatedTokens) &&
        Objects.equals(this.prefill, details.prefill) &&
        Objects.equals(this.seed, details.seed) &&
        Objects.equals(this.tokens, details.tokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestOfSequences, finishReason, generatedTokens, prefill, seed, tokens);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Details {\n");
    
    sb.append("    bestOfSequences: ").append(toIndentedString(bestOfSequences)).append("\n");
    sb.append("    finishReason: ").append(toIndentedString(finishReason)).append("\n");
    sb.append("    generatedTokens: ").append(toIndentedString(generatedTokens)).append("\n");
    sb.append("    prefill: ").append(toIndentedString(prefill)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
